import { secondsToTimestampSRT, secondsToTimestampVTT } from "../utils-date";

export const downloadFile = async (format: string, fileName: string, content: string) => {
	if (!content) return;

	let type = "text/plain";
	if (format === "csv") {
		type = "text/csv;charset=utf-8;";
	}

	const blob = new Blob([content], { type: type });
	const url = URL.createObjectURL(blob);
	const a = document.createElement("a");
	a.href = url;
	a.download = `${fileName}.${format}`;
	document.body.appendChild(a);
	a.click();
	document.body.removeChild(a);
	URL.revokeObjectURL(url);
};

export function exportToFile({ type = "srt", title, content, languageType }: { type?: string; title: string; content: any[]; languageType: string }) {
	let subtitleContent = "";
	switch (type) {
		case "srt":
			subtitleContent = generateSRTContent(content, languageType);
			break;
		case "vtt":
			subtitleContent = generateVTTContent(content, languageType);
			break;
		case "ass":
			subtitleContent = generateASSContent(content, languageType);
			break;
		case "txt":
			subtitleContent = generateTxtContent(content, languageType);
			break;
		default:
			break;
	}

	downloadFile(type, title, subtitleContent);
}
function generateSRTContent(subtitles: any[], languageType: string): string {
	if (subtitles.length === 0) return "";
	return subtitles
		.map((subtitle, index) => {
			let text = "";
			if (languageType === "0") {
				text = subtitle.text;
			} else if (languageType === "1") {
				text = subtitle.translation;
			} else if (languageType === "multi") {
				text = `${subtitle.text}\n${subtitle.translation}`;
			}
			return `${index + 1}\n${secondsToTimestampSRT(subtitle.start)} --> ${secondsToTimestampSRT(subtitle.end)}\n${text}\n\n`;
		})
		.join("");
}
function generateVTTContent(subtitles: any[], languageType: string): string {
	if (subtitles.length === 0) return "";

	let vttContent = "WEBVTT\n\n";

	subtitles.forEach((item, index) => {
		const startTime = secondsToTimestampVTT(item.start);
		const endTime = secondsToTimestampVTT(item.end);

		vttContent += `${index + 1}\n`;
		vttContent += `${startTime} --> ${endTime}\n`;

		let text = "";
		if (languageType === "0") {
			text = item.text;
		} else if (languageType === "1") {
			text = item.translation;
		} else if (languageType === "multi") {
			text = `${item.text}\n${item.translation}`;
		}
		vttContent += `${text}\n\n`;
	});

	return vttContent;
}
function generateASSContent(subtitles: any[], languageType: string): string {
	function formatTime(timeInSeconds: number): string {
		const hours = Math.floor(timeInSeconds / 3600);
		const minutes = Math.floor((timeInSeconds % 3600) / 60);
		const seconds = Math.floor(timeInSeconds % 60);
		const milliseconds = Math.round((timeInSeconds % 1) * 100);

		const formattedHours = String(hours).padStart(1, "0"); // 确保小时始终为1位
		const formattedMinutes = String(minutes).padStart(2, "0");
		const formattedSeconds = String(seconds).padStart(2, "0");
		const formattedMilliseconds = String(milliseconds).padStart(2, "0");

		return `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;
	}

	if (subtitles.length === 0) return "";

	let assContent = `[Script Info]
; Script generated by SubtitleGen.com
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
`;

	subtitles.forEach((item, index) => {
		const startTime = formatTime(item.start);
		const endTime = formatTime(item.end);
		// const text = `${item.text.replace(/\n/g, "\\N")}`;
		let text = "";
		if (languageType === "0") {
			text = `${item.text.replace(/\n/g, "\\N")}`;
		} else if (languageType === "1") {
			text = `${item.translation.replace(/\n/g, "\\N")}`;
		} else if (languageType === "multi") {
			text = `${item.text.replace(/\n/g, "\\N")}\\N${item.translation.replace(/\n/g, "\\N")}`;
		}

		assContent += `Dialogue: 0,${startTime},${endTime},Default,,0,0,0,,${text}\n`;
	});

	return assContent;
}
function generateTxtContent(subtitles: any[], languageType: string): string {
	if (subtitles.length === 0) return "";

	let textContent = "";

	subtitles.forEach((item) => {
		let text = "";
		if (languageType === "0") {
			text = item.text;
		} else if (languageType === "1") {
			text = item.translation;
		} else if (languageType === "multi") {
			text = `${item.text}\n${item.translation}`;
		}

		textContent += `${text}\n\n`;
	});

	return textContent.trim();
}
